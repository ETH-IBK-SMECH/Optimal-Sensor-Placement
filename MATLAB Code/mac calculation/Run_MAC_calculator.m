clearvars;close all;clc
%Function that calculates the MAC-value between the original mode shape
%derived from the FEM model and the interpolated mode shape, based on an
%obtained sensor configuration (modal displacement at the measured DOFs are
%assumed known and all other displacement are interpolated)
%The MAC-value is an indicator for the quality of how well a certain
%configuration can be used to reconstruct the target mode shapes

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Author: C. Leyder
% Last Update: 5.12.2018
% ETH Zurich
% Copyright 2018 C. Leyder


%The function comprises three parts
%Part0: Evaluation of the MAC-value for random configurations generated
%with randomConfig.m in the function runpadOSP.m => save to Metrics.MAC.random.mat
%Part1: Evaluation of the MAC-value for configurations evaluated with the
%OSP alogrithms (Comparison_OSP-m)
%Part2: Evaluation of the MAC-value for a single specific configuration
%(e.g. the implemented configuration)
%The MAC-metrics are evaluated with the subfunction
%plot_reduced_modeshapes.m, this function operates with the DOF numbering
%according to Comparison_OSP.m (x-DOFs: 1,4,7, etc., y-DOFs: 2,5,8, etc.,
%rot_DOFs: 3,6,9,etc.)

tic

cd ../
currentpath=pwd;
addpath(strcat(currentpath,'\dispersion'))
addpath(strcat(currentpath,'\paretofront'))
addpath(strcat(currentpath,'\random configurations'))
cd 'mac calculation'

load ModalData_FE atyp Coord un wn   %modal data from the FE model (created within the Evaluation_OSP.m function)
load OSP_VD.mat  R_vd sensorRange    %results from the dispersion analysis (created with dispersion/runpadOSP.m)
load MetricsMAC.mat Metrics        %results from Rum_MAC_calculator.m (this function) => enable to add multiple results to the same file  (saved in subfolder paretofront) 
load RandomConfigs.mat randind       %random configurations (generated by paretofront/Generate_randomConfig.m)

ploton=0; %set to 0 to avoid ploting (e.g. for random configurations)!!!, set to 1 to visualize plots


%% 0. Evaluate for random configurations (warning: takes a lot of calculation time, if there are many random configs)
[~,nsamples,~]=size(randind); %number of random configurations
nsmin=min(sensorRange); %minimum number of sensors
nsmax=max(sensorRange); %maximum number of sensors
[~,nm]=size(un); %number of target modes

MAC=zeros(nsmax,nsamples,nm);

for nsensors=nsmin:nsmax
    for i=1:1:nsamples
        r_ind=randind(1:nsensors,i,nsensors-nsmin+1);
        sens_ind.x=[];
        sens_ind.z=[];
        for j=1:1:nsensors
            if rem(r_ind(j),3)==2
                sens_ind.z(i,j)=floor(r_ind(j)/3)+1;
            elseif rem(r_ind(j),3)==1
                sens_ind.x(i,j)=floor(r_ind(j)/3)+1;
            end 
        end
        sens_ind.x(sens_ind.x==0)=[];
        sens_ind.z(sens_ind.z==0)=[];   
        sens_ind.x=sens_ind.x';
        sens_ind.z=sens_ind.z';
        [MAC(nsensors,i,:)] = plot_reduced_modeshapes(Coord,un,wn,atyp,3,sens_ind,ploton);
    end

end

Metrics.MAC.random=MAC;

Metrics.MAC.random(Metrics.MAC.random==0)=NaN;


% %% I.  Load the OSP configurations and calculate the MAC-values
% [~,nm]=size(un); %number of target modes
% MAC=zeros(max(sensorRange),nm);
% 
% flags={'mke';'efi';'iei'};
% for indm=1:1:length(flags)  %index methods
%     for j=min(sensorRange):max(sensorRange)   %select a configuration or loop over configurations
%      clear sens_name
%      if  strcmp(flags{indm},'mke')
%         sens_name = R_vd(j).ospMKE;
%      elseif strcmp(flags{indm},'efi')
%         sens_name = R_vd(j).ospEFI;   
%      elseif strcmp(flags{indm},'iei')
%         sens_name = R_vd(j).ospIEI;
%      end
%     % Joint Calculation
%     sens_ind.x = [];
%     sens_ind.z = [];
%     for i=1:length(sens_name)
%     if sens_name(i)-3*fix(sens_name(i)/3)==1
%     joint = (sens_name(i)-1)/3+1;
%     sens_ind.x(i)=joint;
%     else
%     joint = (sens_name(i)-2)/3+1;
%     sens_ind.z(i)=joint;
%     end
%     end
%     sens_ind.x=sens_ind.x';
%     sens_ind.z=sens_ind.z';
%     [MAC(j,:)] = plot_reduced_modeshapes(Coord,un,wn,atyp,3,sens_ind,ploton);
%     end
%      if  strcmp(flags{indm},'mke')
%         Metrics.MAC.MKE=MAC;
%      elseif strcmp(flags{indm},'efi')
%         Metrics.MAC.EFI=MAC;   
%      elseif strcmp(flags{indm},'iei')
%         Metrics.MAC.IEI=MAC;
%      end
% end
% 
% Metrics.MAC.EFI(Metrics.MAC.EFI==0)=NaN;
% Metrics.MAC.MKE(Metrics.MAC.MKE==0)=NaN;
% Metrics.MAC.IEI(Metrics.MAC.IEI==0)=NaN;
% 
% 
% 
% %% II. Evaluate for the implemented configuration (example)
% % % % Full configuration
% % % % %A11:2; A12:11; A13:34 oder 35; A14:
% clear MAC sens_ind
% sens_ind.x=[2,11,34,4,21,47,6,26,59,8,16]';
% sens_ind.z=[2,11,34,4,21,47,6,26,59,8,16]';
% [MAC] = plot_reduced_modeshapes(Coord,un,wn,atyp,3,sens_ind,ploton); %#ok<NASGU>
% 
% % Reduced configuration
% %A11:2; A12:11; A13:34 oder 35; A14:4,
% %A21:21, A22: 47, A23:6, A24: 26
% %A31: 59, A32:8, A33: 16
% clear MAC sens_ind
% sens_ind.x=[2,11,34,4,21,47,6,26,59,8,16]';
% sens_ind.z=[34,47,59]';
% [MAC] = plot_reduced_modeshapes(Coord,un,wn,atyp,3,sens_ind,ploton);



%% save (for part 0 and part 1)
cd ..\
save('./paretofront/MetricsMAC.mat','Metrics')
cd('mac calculation')
toc
